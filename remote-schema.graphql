# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Mutation {
    createProfession(input: ProfessionInput!): Profession
    createQualification(input: QualificationInput!): Qualification
    createQuestion(input: QuestionInput!): Question
    createUser(input: UserInput!): User
    deleteProfessions(ids: [ID!]!): [Profession!]
    deleteQualifications(ids: [ID!]!): [Qualification!]
    deleteQuestions(ids: [ID!]!): [Question!]
    deleteUsers(ids: [ID!]!): [User!]
    signIn(email: String!, password: String!, staySignedIn: Boolean): UserWithToken
    updateManyUsers(ids: [ID!]!, input: UpdateManyUsersInput!): [User!]
    updateProfession(id: ID!, input: ProfessionInput!): Profession
    updateQualification(id: ID!, input: QualificationInput!): Qualification
    updateQuestion(id: ID!, input: QuestionInput!): Question
    updateUser(id: ID!, input: UserInput!): User
}

type Profession {
    createdAt: Time!
    description: String
    id: ID!
    name: String!
    slug: String!
}

type ProfessionList {
    items: [Profession!]
    total: Int!
}

type Qualification {
    code: String!
    createdAt: Time!
    description: String
    formula: String
    id: ID!
    name: String!
    slug: String!
}

type QualificationList {
    items: [Qualification!]
    total: Int!
}

type Query {
    generateTest(limit: Int, qualificationIDs: [ID!]!): [Question!]
    me: User
    profession(id: Int, slug: String): Profession
    professions(filter: ProfessionFilter, limit: Int, offset: Int, sort: [String!]): ProfessionList!
    qualification(id: Int, slug: String): Qualification
    qualifications(filter: QualificationFilter, limit: Int, offset: Int, sort: [String!]): QualificationList!
    questions(filter: QuestionFilter, limit: Int, offset: Int, sort: [String!]): QuestionList!
    user(id: Int!): User
    users(filter: UserFilter, limit: Int, offset: Int, sort: [String!]): UserList!
}

type Question {
    answerA: String
    answerAImage: String
    answerB: String
    answerBImage: String
    answerC: String
    answerCImage: String
    answerD: String
    answerDImage: String
    content: String!
    correctAnswer: Answer!
    createdAt: Time!
    explanation: String
    from: String
    id: ID!
    image: String
    qualification: Qualification
    updatedAt: Time!
}

type QuestionList {
    items: [Question!]
    total: Int!
}

type User {
    activated: Boolean!
    createdAt: Time!
    displayName: String!
    email: String!
    id: ID!
    role: Role!
}

type UserList {
    items: [User!]
    total: Int!
}

type UserWithToken {
    token: String!
    user: User!
}

enum Answer {
    a
    b
    c
    d
}

enum Role {
    admin
    user
}

input ProfessionFilter {
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtLT: Time
    createdAtLTE: Time
    descriptionIEQ: String
    descriptionMATCH: String
    id: [ID!]
    idNEQ: [ID!]
    name: [String!]
    nameIEQ: String
    nameMATCH: String
    nameNEQ: [String!]
    qualificationID: [ID!]
    slug: [String!]
    slugNEQ: [String!]
}

input ProfessionInput {
    description: String
    name: String
}

input QualificationFilter {
    code: [String!]
    codeIEQ: String
    codeMATCH: String
    codeNEQ: [String!]
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtLT: Time
    createdAtLTE: Time
    descriptionIEQ: String
    descriptionMATCH: String
    formula: [String!]
    formulaNEQ: [String!]
    id: [ID!]
    idNEQ: [ID!]
    name: [String!]
    nameIEQ: String
    nameMATCH: String
    nameNEQ: [String!]
    or: QualificationFilterOr
    professionID: [Int!]
    slug: [String!]
    slugNEQ: [String!]
}

input QualificationFilterOr {
    codeIEQ: String
    codeMatch: String
    nameIEQ: String
    nameMatch: String
}

input QualificationInput {
    associateProfession: [Int!]
    code: String
    description: String
    dissociateProfession: [Int!]
    formula: String
    name: String
}

input QuestionFilter {
    contentIEQ: String
    contentMATCH: String
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtLT: Time
    createdAtLTE: Time
    from: [String!]
    id: [ID!]
    idNEQ: [ID!]
    qualificationFilter: QualificationFilter
    qualificationID: [Int!]
    qualificationIDNEQ: [Int!]
}

input QuestionInput {
    answerA: String
    answerAImage: Upload
    answerB: String
    answerBImage: Upload
    answerC: String
    answerCImage: Upload
    answerD: String
    answerDImage: Upload
    content: String
    correctAnswer: Answer
    deleteAnswerAImage: Boolean
    deleteAnswerBImage: Boolean
    deleteAnswerCImage: Boolean
    deleteAnswerDImage: Boolean
    deleteImage: Boolean
    explanation: String
    from: String
    image: Upload
    qualificationID: Int
}

input UpdateManyUsersInput {
    activated: Boolean
    role: Role
}

input UserFilter {
    activated: Boolean
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtLT: Time
    createdAtLTE: Time
    displayName: [String!]
    displayNameIEQ: String
    displayNameMATCH: String
    displayNameNEQ: [String!]
    email: [String!]
    emailIEQ: String
    emailMATCH: String
    emailNEQ: [String!]
    id: [ID!]
    idNEQ: [ID!]
    or: UserFilterOr
    role: [Role!]
    roleNEQ: [Role!]
}

input UserFilterOr {
    displayNameIEQ: String
    displayNameMATCH: String
    emailIEQ: String
    emailMATCH: String
}

input UserInput {
    activated: Boolean
    displayName: String
    email: String
    password: String
    role: Role
}


scalar Upload

scalar Time